from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import os
import numpy as np
import scipy.stats as st
from h5py.h5p import PropDXID
from imageio import imread, imsave
from skimage.transform import resize
from skimage import img_as_ubyte
import tensorflow.compat.v1 as tf
tf.config.run_functions_eagerly(True)
tf.disable_v2_behavior()
import tensorflow.python.ops.numpy_ops.np_config as np_config
np_config.enable_numpy_behavior()
from nets import inception_v3, inception_v4, inception_resnet_v2, resnet_v2
import random
import tf_slim as slim
import cv2
os.environ['CUDA_VISIBLE_DEVICES'] = '0'

tf.flags.DEFINE_integer('batch_size', 10, 'How many images process at one time.')
tf.flags.DEFINE_float('max_epsilon', 16.0, 'max epsilon.')
tf.flags.DEFINE_integer('num_iter', 10, 'max iteration.')
tf.flags.DEFINE_float('momentum', 1.0, 'momentum about the model.')
tf.flags.DEFINE_integer(
    'size', 3, 'The number of augmented images generated by the histogram method.')
tf.flags.DEFINE_integer(
    'image_width', 299, 'Width of each input images.')
tf.flags.DEFINE_integer(
    'image_height', 299, 'Height of each input images.')
tf.flags.DEFINE_float('prob', 0.5, 'probability of using diverse inputs.')
tf.flags.DEFINE_integer('image_resize', 331, 'Height of each input images.')
tf.flags.DEFINE_string('checkpoint_path', './models',
                       'Path to checkpoint for pretained models.')
tf.flags.DEFINE_string('input_dir', './dev_data/val_rs',
                       'Input directory with images.')
tf.flags.DEFINE_string('output_dir', './outputs_mi_histogram',
                       'Output directory with images.')
FLAGS = tf.flags.FLAGS

np.random.seed(0)
tf.set_random_seed(0)
random.seed(0)

model_checkpoint_map = {
    'inception_v3': os.path.join(FLAGS.checkpoint_path, 'inception_v3.ckpt'),
    'adv_inception_v3': os.path.join(FLAGS.checkpoint_path, 'adv_inception_v3_rename.ckpt'),
    'ens3_adv_inception_v3': os.path.join(FLAGS.checkpoint_path, 'ens3_adv_inception_v3_rename.ckpt'),
    'ens4_adv_inception_v3': os.path.join(FLAGS.checkpoint_path, 'ens4_adv_inception_v3_rename.ckpt'),
    'inception_v4': os.path.join(FLAGS.checkpoint_path, 'inception_v4.ckpt'),
    'inception_resnet_v2': os.path.join(FLAGS.checkpoint_path, 'inception_resnet_v2_2016_08_30.ckpt'),
    'ens_adv_inception_resnet_v2': os.path.join(FLAGS.checkpoint_path, 'ens_adv_inception_resnet_v2_rename.ckpt'),
    'resnet_v2': os.path.join(FLAGS.checkpoint_path, 'resnet_v2_101.ckpt')}

def load_images(input_dir, batch_shape):
    images = np.zeros(batch_shape)
    filenames = []
    idx = 0
    batch_size = batch_shape[0]
    for filepath in tf.gfile.Glob(os.path.join(input_dir, '*')):
        with tf.gfile.Open(filepath, 'rb') as f:
            image = imread(f, pilmode='RGB').astype(np.float) / 255.0
        images[idx, :, :, :] = image * 2.0 - 1.0
        filenames.append(os.path.basename(filepath))
        idx += 1
        if idx == batch_size:
            yield filenames, images
            filenames = []
            images = np.zeros(batch_shape)
            idx = 0
    if idx > 0:
        yield filenames, images

def save_images(images, filenames, output_dir):
    for i, filename in enumerate(filenames):
        with tf.gfile.Open(os.path.join(output_dir, filename), 'w') as f:
            imsave(f, img_as_ubyte((images[i, :, :, :] + 1.0) * 0.5), format='png')

def check_or_create_dir(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

def normalize_image(image):
    return (image + 1.0) * 127.5

def calculate_histogram(image, bins=256):
    hist_r = tf.histogram_fixed_width(image[..., 0], [0.0, 255.0], nbins=bins)
    hist_g = tf.histogram_fixed_width(image[..., 1], [0.0, 255.0], nbins=bins)
    hist_b = tf.histogram_fixed_width(image[..., 2], [0.0, 255.0], nbins=bins)
    return hist_r, hist_g, hist_b

def histogram_matching(source_image, target_histograms):
    matched_image = []
    for i in range(3):
        source_hist = tf.histogram_fixed_width(source_image[..., i], [0.0, 255.0], nbins=256)
        target_hist = target_histograms[i]
        target_cdf = tf.cumsum(target_hist) / tf.reduce_sum(target_hist)
        lut = tf.searchsorted(target_cdf, target_cdf)
        matched_channel = tf.gather(lut, tf.cast(source_image[..., i], tf.int32))
        matched_image.append(tf.cast(matched_channel, tf.float32))

    return tf.stack(matched_image, axis=-1)

def R_random_G_sampling_B_UseEdge(image,size,part,leaf):
    images_normalized = normalize_image(image)

    hist_r, hist_g, hist_b = calculate_histogram(image)
    hist_r = tf.random.shuffle(hist_r)
    hist_g = histogram_sampling(hist_g,size)
    hist_b = histogram_useEdge(part,leaf,200,300)

    images_v = images_normalized + histogram_matching(images_normalized, [hist_r, hist_g, hist_b])
    min_value = tf.reduce_min(images_v)
    max_value = tf.reduce_max(images_v)
    images_v = ((images_v - min_value) / (max_value - min_value)) * 2 - 1
    return images_v

def R_random_G_sampling_B_UseEdge_function(images,size,part,leaf):
    for i in range(images.shape[0]):
        single_image_tensor = images[i]
        new_image_tensor = R_random_G_sampling_B_UseEdge(single_image_tensor,size,part,leaf)
        images = tf.tensor_scatter_nd_update(images, [[i]], [new_image_tensor])
    return images

#只是用边缘的几个颜色值
def histogram_useEdge(part, leaf, minval=200, maxval=300, total_sum=89401):
    hist = tf.zeros((256,), dtype=tf.int32)
    random_parts = tf.random.uniform((part,), minval=minval, maxval=maxval, dtype=tf.float64)
    random_parts_sum = tf.reduce_sum(random_parts)
    adjusted_random_parts = random_parts * total_sum / random_parts_sum
    adjusted_random_parts_non_negative = tf.maximum(adjusted_random_parts, 0)
    adjusted_random_parts_int = tf.cast(tf.math.round(adjusted_random_parts_non_negative[:leaf]), tf.int32)
    hist = tf.tensor_scatter_nd_update(hist, [[i] for i in range(leaf)], adjusted_random_parts_int)
    adjusted_random_parts_int_back = tf.cast(tf.math.round(adjusted_random_parts_non_negative[leaf:]),
                                             tf.int32)
    hist = tf.tensor_scatter_nd_update(hist, [[i] for i in range((256 - part + leaf), 256)],
                                       adjusted_random_parts_int_back)
    return hist

def histogram_sampling(hist,range_size):
    pad_size = range_size - tf.shape(hist)[0] % range_size
    hist_padded = tf.pad(hist, [[0, pad_size]])
    result = tf.zeros_like(hist_padded)
    sums = tf.reduce_sum(tf.reshape(hist_padded, (-1, range_size)), axis=1)
    indices = tf.range(0, tf.shape(hist_padded)[0], range_size)[:, tf.newaxis]

    result = tf.tensor_scatter_nd_update(result, indices, sums)
    return result[:256]

def build_histogram(image, iter_i):
    histogram = [image]

    histogram_image = R_random_G_sampling_B_UseEdge_function(image, 110, 110, 55)
    histogram.append(histogram_image)

    histogram_image = R_random_G_sampling_B_UseEdge_function(image, 50, 50, 25)
    histogram.append(histogram_image)

    histogram_image = R_random_G_sampling_B_UseEdge_function(image, 24, 24, 12)
    histogram.append(histogram_image)

    final_output = tf.concat(histogram, axis=0)

    return final_output

def graph(x, y, i, x_max, x_min, grad):
    eps = 2.0 * FLAGS.max_epsilon / 255.0
    num_iter = FLAGS.num_iter
    alpha = eps / num_iter
    momentum = FLAGS.momentum
    num_classes = 1001

    x_histogram = build_histogram(x, i)
    x_batch = tf.concat([x_histogram, x_histogram / 2., x_histogram / 4., x_histogram / 8., x_histogram / 16.], axis=0)

    with slim.arg_scope(inception_v3.inception_v3_arg_scope()):
        logits_v3, end_points_inc_v3 = inception_v3.inception_v3(
            x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
    #   logits_v4, end_points_v4 = inception_v4.inception_v4(
    #       x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(inception_resnet_v2.inception_resnet_v2_arg_scope()):
    #    logits_res_v2, end_points_res_v2 = inception_resnet_v2.inception_resnet_v2(
    #        x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(resnet_v2.resnet_arg_scope()):
    #   logits_resnet, end_points_resnet = resnet_v2.resnet_v2_101(
    #       x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # print(f"print(x_batch.shape):{x_batch.shape}")
    # with slim.arg_scope(inception_v3.inception_v3_arg_scope()):
    #     logits_v3, end_points_inc_v3 = inception_v3.inception_v3(
    #         x_batch, num_classes=num_classes, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
    #     logits_v4, end_points_v4 = inception_v4.inception_v4(
    #         x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(inception_resnet_v2.inception_resnet_v2_arg_scope()):
    #     logits_res_v2, end_points_res_v2 = inception_resnet_v2.inception_resnet_v2(
    #         x_batch, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
    # with slim.arg_scope(inception_v3.inception_v3_arg_scope()):
    #      logits_v3, end_points_v3 = inception_v3.inception_v3(
    #          x_batch, num_classes=num_classes, is_training=False, reuse=tf.AUTO_REUSE)

    one_hot = tf.concat([tf.one_hot(y, num_classes)] * 5 * (FLAGS.size + 1), axis=0)

    cross_entropy = tf.losses.softmax_cross_entropy(one_hot, logits_v3)
    # cross_entropy = tf.losses.softmax_cross_entropy(one_hot, logits_v4)
    # cross_entropy = tf.losses.softmax_cross_entropy(one_hot, logits_res_v2)
    # cross_entropy = tf.losses.softmax_cross_entropy(one_hot, logits_resnet)

    noise = tf.reduce_mean(tf.split(tf.gradients(cross_entropy, x_batch, colocate_gradients_with_ops=True)[0], 5) * tf.constant([1, 1/2., 1/4., 1/8., 1/16.])[:, None, None, None, None], axis=0)
    noise = tf.reduce_sum(tf.split(noise, (FLAGS.size + 1)), axis=0)

    noise = noise / tf.reduce_mean(tf.abs(noise), [1, 2, 3], keep_dims=True)

    noise = momentum * grad + noise
    x = x + alpha * tf.sign(noise)
    x = tf.clip_by_value(x, x_min, x_max)
    i = tf.add(i, 1)

    return x, y, i, x_max, x_min, noise

def stop(x, y, i, x_max, x_min, grad):
    num_iter = FLAGS.num_iter
    return tf.less(i, num_iter)

def input_diversity(input_tensor):
    rnd = tf.random_uniform((), FLAGS.image_width, FLAGS.image_resize, dtype=tf.int32)
    rescaled = tf.image.resize_images(input_tensor, [rnd, rnd], method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)
    h_rem = FLAGS.image_resize - rnd
    w_rem = FLAGS.image_resize - rnd
    pad_top = tf.random_uniform((), 0, h_rem, dtype=tf.int32)
    pad_bottom = h_rem - pad_top
    pad_left = tf.random_uniform((), 0, w_rem, dtype=tf.int32)
    pad_right = w_rem - pad_left
    padded = tf.pad(rescaled, [[0, 0], [pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], constant_values=0.)
    padded.set_shape((input_tensor.shape[0], FLAGS.image_resize, FLAGS.image_resize, 3))
    ret = tf.cond(tf.random_uniform(shape=[1])[0] < tf.constant(FLAGS.prob), lambda: padded, lambda: input_tensor)
    ret = tf.image.resize_images(ret, [FLAGS.image_height, FLAGS.image_width],
                                 method=tf.image.ResizeMethod.NEAREST_NEIGHBOR)
    return ret

def main(_):
    f2l = load_labels('./dev_data/val_rs.csv')
    eps = 2 * FLAGS.max_epsilon / 255.0
    batch_shape = [FLAGS.batch_size, FLAGS.image_height, FLAGS.image_width, 3]
    tf.logging.set_verbosity(tf.logging.INFO)
    check_or_create_dir(FLAGS.output_dir)
    with tf.Graph().as_default():
        x_input = tf.placeholder(tf.float32, shape=batch_shape)
        x_max = tf.clip_by_value(x_input + eps, -1.0, 1.0)
        x_min = tf.clip_by_value(x_input - eps, -1.0, 1.0)
        with slim.arg_scope(inception_v3.inception_v3_arg_scope()):
            logits_v3, end_points_v3 = inception_v3.inception_v3(
                x_input, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
        pred = tf.argmax(end_points_v3['Predictions'], 1)

        # with slim.arg_scope(inception_v4.inception_v4_arg_scope()):
        #     logits_v4, end_points_v4 = inception_v4.inception_v4(
        #         x_input, num_classes=1001, is_training=False, reuse=tf.AUTO_REUSE)
        # pred = tf.argmax(end_points_v4['Predictions'], 1)
        i = tf.constant(0)
        grad = tf.zeros(shape=batch_shape)
        x_adv, _, _, _, _, _ = tf.while_loop(stop, graph, [x_input, pred, i, x_max, x_min, grad])
        s1 = tf.train.Saver(slim.get_model_variables(scope='InceptionV3'))
        # s2 = tf.train.Saver(slim.get_model_variables(scope='InceptionV4'))
        # s3 = tf.train.Saver(slim.get_model_variables(scope='InceptionResnetV2'))
        # s4 = tf.train.Saver(slim.get_model_variables(scope='resnet_v2'))
        # s5 = tf.train.Saver(slim.get_model_variables(scope='Ens3AdvInceptionV3'))
        # s6 = tf.train.Saver(slim.get_model_variables(scope='Ens4AdvInceptionV3'))
        # s7 = tf.train.Saver(slim.get_model_variables(scope='EnsAdvInceptionResnetV2'))
        # s8 = tf.train.Saver(slim.get_model_variables(scope='AdvInceptionV3'))
        config = tf.ConfigProto(allow_soft_placement=True)
        config.gpu_options.allow_growth = True
        with tf.Session(config=config) as sess:
            s1.restore(sess, model_checkpoint_map['inception_v3'])
            # s2.restore(sess, model_checkpoint_map['inception_v4'])
            # s3.restore(sess, model_checkpoint_map['inception_resnet_v2'])
            # s4.restore(sess, model_checkpoint_map['resnet_v2'])
            # s5.restore(sess, model_checkpoint_map['ens3_adv_inception_v3'])
            # s6.restore(sess, model_checkpoint_map['ens4_adv_inception_v3'])
            # s7.restore(sess, model_checkpoint_map['ens_adv_inception_resnet_v2'])
            # s8.restore(sess, model_checkpoint_map['adv_inception_v3'])
            idx = 0
            l2_diff = 0
            for filenames, images in load_images(FLAGS.input_dir, batch_shape):
                idx = idx + 1
                print("start the i={} attack".format(idx))
                adv_images = sess.run(x_adv, feed_dict={x_input: images})
                save_images(adv_images, filenames, FLAGS.output_dir)
                diff = (adv_images + 1) / 2 * 255 - (images + 1) / 2 * 255
                l2_diff += np.mean(np.linalg.norm(np.reshape(diff, [-1, 3]), axis=1))

            print('{:.2f}'.format(l2_diff * FLAGS.batch_size / 1000))


def load_labels(file_name):
    import pandas as pd
    dev = pd.read_csv(file_name)
    f2l = {dev.iloc[i]['filename']: dev.iloc[i]['label'] for i in range(len(dev))}
    return f2l


if __name__ == '__main__':
    tf.app.run()
